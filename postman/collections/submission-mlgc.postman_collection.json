{
	"info": {
		"_postman_id": "6ddfcc0e-a75a-450d-9ee2-f0016becbf67",
		"name": "submissions-mlgc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13127137"
	},
	"item": [
		{
			"name": "Prediction With Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Terjadi kesalahan dalam melakukan prediksi');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/D:/MLGC/submissions/data tes/data-test-submissions/bad-request.jpg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/predict",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prediction With Image Size More Than 1000000 byte",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 413 value', () => {\r",
							"    pm.response.to.have.status(413);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Payload content length greater than maximum allowed: 1000000');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/D:/MLGC/submissions/data tes/data-test-submissions/more-than-1mb.jpg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/predict",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prediction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Model is predicted successfully');",
							"    ",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"})",
							"",
							"pm.test('response body data should have id property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const {data} = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty('id');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"});",
							"",
							"pm.test('result should match with the expected class', () => {",
							"    const responseJson = pm.response.json();",
							"    const {data} = responseJson;",
							"",
							"    const expectedClass = [\"Cancer\", \"Non-cancer\"];",
							"    pm.expect(data.result).to.be.oneOf(expectedClass);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/D:/MLGC/submissions/data tes/data-test-submissions/cancer-1.png"
						},
						{
							"key": "last",
							"value": "jon",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/predict",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Opsional] getHistories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    ",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('array');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://localhost:3000/predict/histories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"predict",
						"histories"
					]
				}
			},
			"response": []
		}
	]
}